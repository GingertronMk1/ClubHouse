<?php

namespace App\Tests\Application\Controller;

use App\Domain\Common\ValueObject\DateTime;
use App\Domain\Match\MatchEntity;
use App\Domain\Match\MatchRepositoryInterface;
use App\Domain\Sport\SportEntity;
use App\Domain\Sport\SportRepositoryInterface;
use App\Domain\Team\TeamEntity;
use App\Domain\Team\TeamRepositoryInterface;
use App\Tests\Application\ApplicationTestCase;

/**
 * @internal
 *
 * @coversNothing
 */
class MatchControllerTest extends ApplicationTestCase
{
    private readonly SportEntity $sportEntity;
    private readonly TeamEntity $team1;
    private readonly TeamEntity $team2;
    private readonly MatchEntity $match;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $sportRepository = $this->getContainer()->get(SportRepositoryInterface::class);
        $this->sportEntity = new SportEntity(
            $sportRepository->generateId(),
            'Test Sport',
            ''
        );
        $sportRepository->store($this->sportEntity);

        $teamRepository = $this->getContainer()->get(TeamRepositoryInterface::class);
        $this->team1 = new TeamEntity(
            $teamRepository->generateId(),
            'Team 1',
            '',
            [],
            $this->sportEntity->id
        );

        $this->team2 = new TeamEntity(
            $teamRepository->generateId(),
            'Team 2',
            '',
            [],
            $this->sportEntity->id
        );
        $teamRepository->store($this->team1);
        $teamRepository->store($this->team2);

        $matchRepository = $this->getContainer()->get(MatchRepositoryInterface::class);
        $this->match = new MatchEntity(
            $matchRepository->generateId(),
            'Test Match Special',
            '',
            DateTime::fromString('2024-01-01 09:00:00'),
            $this->team1->id,
            $this->team2->id,
            $this->sportEntity->id
        );
        $matchRepository->store($this->match);
    }

    public function testCreateAndStore(): void
    {
        $initialResponse = $this->client->request('GET', $this->router->generate('match.create'));
        $this->assertResponseStatusCodeSame(200);
        $this->doFormThings(
            $initialResponse,
            'create_match_form',
            [
                'create_match_form[name]' => 'Test Match, not that kind though',
                'create_match_form[start]' => (new \DateTime())->format('Y-m-d H:i:s'),
                'create_match_form[team1]' => $this->team1->id,
                'create_match_form[team2]' => $this->team2->id,
                'create_match_form[sport]' => $this->sportEntity->id,
            ]
        );
        $this->assertResponseRedirects();
    }

    public function testEditAndUpdate(): void
    {
        $initialResponse = $this->client->request('GET', $this->router->generate('match.update', ['matchId' => (string) $this->match->id]));
        $this->assertResponseStatusCodeSame(200);
        $this->doFormThings(
            $initialResponse,
            'update_match_form',
            [
                'update_match_form[name]' => 'Test Match, not that kind though',
                'update_match_form[start]' => (new \DateTime())->format('Y-m-d H:i:s'),
            ]
        );
        $this->assertResponseRedirects();
    }
}
